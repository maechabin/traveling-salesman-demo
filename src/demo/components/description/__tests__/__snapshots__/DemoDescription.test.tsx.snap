// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<DemoDescription /> 子コンポーネントをレンダリングすること 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <DemoDescription />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <DemoButton
          callback={[Function]}
          classname="DemoQuestionButton"
          isDisabled={false}
          label="ルートを編集する"
        />,
        <DemoDescriptionText />,
        <DemoButton
          callback={[Function]}
          classname="DemoDescriptionButton"
          isDisabled={false}
          label="正解（最短経路）を見る"
        />,
      ],
      "className": "DemoDescription",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "callback": [Function],
          "classname": "DemoQuestionButton",
          "isDisabled": false,
          "label": "ルートを編集する",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "callback": [Function],
          "classname": "DemoDescriptionButton",
          "isDisabled": false,
          "label": "正解（最短経路）を見る",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <DemoButton
            callback={[Function]}
            classname="DemoQuestionButton"
            isDisabled={false}
            label="ルートを編集する"
          />,
          <DemoDescriptionText />,
          <DemoButton
            callback={[Function]}
            classname="DemoDescriptionButton"
            isDisabled={false}
            label="正解（最短経路）を見る"
          />,
        ],
        "className": "DemoDescription",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "callback": [Function],
            "classname": "DemoQuestionButton",
            "isDisabled": false,
            "label": "ルートを編集する",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "callback": [Function],
            "classname": "DemoDescriptionButton",
            "isDisabled": false,
            "label": "正解（最短経路）を見る",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
